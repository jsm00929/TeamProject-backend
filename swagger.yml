swagger: '2.0'
info:
  version: '1.0.0'
  title: 'Auth API'
basePath: '/api'
schemes:
  - 'http'
consumes:
  - 'application/json'
produces:
  - 'application/json'

paths:
  /auth/signup:
    post:
      tags:
        - 'Auth'
      summary: '회원 가입'
      description: '새로운 사용자를 등록합니다.'
      parameters:
        - in: 'body'
          name: 'SignupBody'
          description: '등록할 사용자 정보'
          required: true
          schema:
            $ref: '#/components/schemas/SignupBody'

      responses:
        201:
          description: '성공적으로 회원 가입한 경우(응답 Body 없음)'

          headers:
            Set-Cookie:
              $ref: '#/components/headers/Set-Cookie'

        400:
          description: '입력 값 검증 실패한 경우..(body의 model 펼쳐서 참조)'
          schema:
            $ref: '#/components/schemas/InvalidRequestBodyError'

        409:
          description: '아이디(username)가 중복되면 안 됨...'
          schema:
            $ref: '#/components/schemas/DuplicateUserError'

        409(2):
          description: '이메일도 중복되면 안 됨...'
          schema:
            $ref: '#/components/schemas/DuplicateEmailError'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

  /auth/login:
    post:
      tags:
        - 'Auth'
      summary: '로그인'
      description: '등록된 사용자로 로그인합니다.'

      parameters:
        - in: 'body'
          name: 'LoginBody'
          description: '로그인할 사용자 정보'
          required: true
          schema:
            $ref: '#/components/schemas/LoginBody'

      responses:
        200:
          description: '성공적으로 로그인한 경우(응답 body 없음)'
          headers:
            Set-Cookie:
              $ref: '#/components/headers/Set-Cookie'

        400:
          description: '입력 Body 오류'
          schema:
            $ref: '#/components/schemas/InvalidRequestBodyError'

        401:
          description: '구글 회원가입 계정(비밀번호 설정하지 않은 상태)'
          schema:
            $ref: '#/components/schemas/NotSetPasswordError'

        401(2):
          description: '비밀번호 일치 안함'
          schema:
            $ref: '#/components/schemas/InvalidPasswordError'

        404:
          description: '존재하지 않는 계정'
          schema:
            $ref: '#/components/schemas/UserNotFoundError'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

  /auth/signup/google:
    get:
      tags:
        - 'Auth'
      summary: 'Google Social 회원가입'
      description: 'Google 인증 페이지로 Redirect하여 구글 계정 인증 후 가입 진행'
      security:
        - googleAuth: [ ]

      responses:
        201:
          description: 구글 계정 인증 및 회원가입 성공
          headers:
            Set-Cookie:
              $ref: '#/components/headers/Set-Cookie'

        409:
          description: '아이디(username)가 중복되면 안 됨...'
          schema:
            $ref: '#/components/schemas/DuplicateUserError'

        409(2):
          description: '이메일도 중복되면 안 됨...'
          schema:
            $ref: '#/components/schemas/DuplicateEmailError'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

      # responses:
      #   302:
      #     description: '구글 계정을 통한 회원가입을 위해 OAuth 인증 페이지로 이동하도록 Redirect'

  /auth/login/google:
    get:
      tags:
        - 'Auth'
      summary: 'Google Social 로그인'
      description: 'Google 인증 페이지로 Redirect하여 구글 계정 인증 후 로그인 진행'

      responses:
        200:
          description: '성공적으로 로그인한 경우(응답 body 없음)'
          headers:
            Set-Cookie:
              $ref: '#/components/headers/Set-Cookie'
        404:
          description: '존재하지 않는 계정'
          schema:
            $ref: '#/components/schemas/UserNotFoundError'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

  /auth/refresh-token:
    patch:
      tags:
        - 'Auth'
      summary: 'Access Token 갱신'
      description: 'Refresh Token을 이용하여 새로운 Access Token을 발급합니다.'

      parameters:
        - in: 'cookie'
          name: 'refreshToken'
          description: 'Refresh Token'
          required: true
          type: string

      responses:
        200:
          description: '성공적으로 Access Token을 발급한 경우(응답 body 없음)'
          set-cookie:
            - access_token={{accessToken}}; Path=/; HttpOnly; Secure

        400:
          description: 'Refresh Token 만료된 경우'
          schema:
            $ref: '#/components/schemas/ExpiredRefreshTokenError'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

  /auth/logout:
    post:
      tags:
        - 'Auth'
      summary: '로그아웃'
      description: '현재 사용자를 로그아웃합니다. 클라이언트에 존재하는 AccessToken, RefreshToken 쿠키가 모조리 지워집니다. 없으면 아무 일도 일어나지 않습니다.'

      responses:
        200:
          description: '로그아웃 성공(응답 body 읎음)'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

  /users/{userId}:
    get:
      tags:
        - 'Users'
      summary: '사용자 정보 가져오기'
      description: 'userId와 일치하는 사용자의 정보를 가져옵니다.'
      produces:
        - 'application/json'
      parameters:
        - in: 'params'
          name: 'userId'
          description: '사용자 정보 가져오기'
          required: true
          type: string
      responses:
        200:
          description: '사용자 정보 가져오기 성공'
          schema:
            $ref: '#/components/schemas/UserOutput'

        404:
          description: 해당 사용자를 찾을 수 없습니다.
          schema:
            $ref: '#/components/schemas/UserNotFoundError'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

  /users/me:
    get:
      tags:
        - 'Users'
      summary: '내 정보 가져오기'
      description: '현재 로그인한 사용자의 정보를 가져옵니다.'
      parameters:
        - $ref: '#/components/parameters/AccessTokenCookie'

      responses:
        200:
          description: '내 정보 가져오기 성공'
          schema:
            $ref: '#/components/schemas/UserOutput'

        401:
          description: 'AccessToken이 유효하지 않은 경우'
          schema:
            $ref: '#/components/schemas/InvalidTokenError'

        401(2):
          description: 'AccessToken이 만료된 경우'
          schema:
            $ref: '#/components/schemas/ExpiredAccessTokenError'

        404:
          description: 해당 사용자를 찾을 수 없습니다.
          schema:
            $ref: '#/components/schemas/UserNotFoundError'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

    patch:
      tags:
        - 'Users'
      summary: 현재 사용자 정보 수정
      parameters:
        - $ref: '#/components/parameters/AccessTokenCookie'

        - name: UpdateMeBody
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/UpdateMeBody'

      responses:
        200:
          description: 성공적으로 사용자 정보가 업데이트됨(응답 body 읎음)
        400:
          description: '입력 값 검증 실패한 경우..(body의 model 펼쳐서 참조)'
          schema:
            $ref: '#/components/schemas/InvalidRequestBodyError'
        401:
          description: 'AccessToken이 유효하지 않은 경우'
          schema:
            $ref: '#/components/schemas/InvalidTokenError'

        401(2):
          description: 'AccessToken이 만료된 경우'
          schema:
            $ref: '#/components/schemas/ExpiredAccessTokenError'

        404:
          description: 해당 사용자를 찾을 수 없습니다.
          schema:
            $ref: '#/components/schemas/UserNotFoundError'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

    delete:
      tags:
        - 'Users'
      summary: 회원 탈티
      parameters:
        - $ref: '#/components/parameters/AccessTokenCookie'

        - name: DeleteUserBody
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/DeleteUserBody'

      responses:
        200:
          description: 회원 탈티 성공

        401:
          description: 'AccessToken이 유효하지 않은 경우'
          schema:
            $ref: '#/components/schemas/InvalidTokenError'

        401(2):
          description: 'AccessToken이 만료된 경우'
          schema:
            $ref: '#/components/schemas/ExpiredAccessTokenError'

        404:
          description: 해당 사용자를 찾을 수 없습니다.
          schema:
            $ref: '#/components/schemas/UserNotFoundError'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

  /users/me/password:
    patch:
      tags:
        - 'Users'
      summary: '사용자 비밀번호 수정'
      description: '현재 로그인한 사용자의 비밀번호를 수정합니다.'
      parameters:
        - in: body
          name: UpdateUserPasswordBody
          description: '이전 비밀번호, 수정할 비밀번호'
          required: true
          schema:
            $ref: '#/components/schemas/UpdateUserPasswordBody'

      responses:
        200:
          description: '사용자 비밀번호 수정 성공'

        401:
          description: 'AccessToken이 유효하지 않은 경우'
          schema:
            $ref: '#/components/schemas/InvalidTokenError'

        401(2):
          description: 'AccessToken이 만료된 경우'
          schema:
            $ref: '#/components/schemas/ExpiredAccessTokenError'

        404:
          description: 해당 사용자를 찾을 수 없습니다.
          schema:
            $ref: '#/components/schemas/UserNotFoundError'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

  /users/me/avatars:
    post:
      tags:
        - 'Users'
      summary: '사용자 프로필 사진 수정'
      description: '현재 로그인한 사용자의 프로필 사진을 수정합니다.'
      parameters:
        - $ref: '#/components/parameters/AccessTokenCookie'
        - in: formData
          name: avatar
          type: file
          description: 업로드 할 이미지 파일

      responses:
        200:
          description: '사용자 프로필 사진 수정 성공'
          schema:
            $ref: '#/components/schemas/UpdateAvatarOutput'

        401:
          description: 'AccessToken이 유효하지 않은 경우'
          schema:
            $ref: '#/components/schemas/InvalidTokenError'

        401(2):
          description: 'AccessToken이 만료된 경우'
          schema:
            $ref: '#/components/schemas/ExpiredAccessTokenError'

        404:
          description: 해당 사용자를 찾을 수 없습니다.
          schema:
            $ref: '#/components/schemas/UserNotFoundError'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

  # /users/me/detail:
  #   get:
  #     summary: 내 상세 정보 가져오기(현재 로그인 된 사용자)
  #     tags:
  #       - Users
  #     parameters:
  #       - $ref: '#/components/parameters/AccessTokenCookie'

  #     responses:
  #       '200':
  #         description: 사용자 상세 정보 잘 온 경우
  #         schema:
  #           $ref: '#/components/schemas/UserDetailInfoOutput'

  #       401:
  #         description: 'AccessToken이 유효하지 않은 경우'
  #         schema:
  #           $ref: '#/components/schemas/InvalidTokenError'

  #       401(2):
  #         description: 'AccessToken이 만료된 경우'
  #         schema:
  #           $ref: '#/components/schemas/ExpiredAccessTokenError'

  #       404:
  #         description: 해당 사용자를 찾을 수 없습니다.
  #         schema:
  #           $ref: '#/components/schemas/UserNotFoundError'

  #       500:
  #         description: '서버 오류가 발생한 경우'
  #         schema:
  #           $ref: '#/components/schemas/InternalServerError'

  /movies:
    get:
      tags:
        - Movies
      summary: '영화를 가져옵니다. query params로 필터링 합니다. 사용 가능한 query params는 열어서 참조'
      # description: 기본 20개씩 가져와요.
      parameters:
        - $ref: '#/components/parameters/SkipQuery'
        - $ref: '#/components/parameters/TakeQuery'
        - $ref: '#/components/parameters/Order'
        - $ref: '#/components/parameters/Criteria'
        - $ref: '#/components/parameters/Genre'

      responses:
        200:
          description: 성공적으로 영화를 가져온 경우
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MovieOutput'



        400:
          description: 'take, skip 범위 벗어난 경우..(query의 model 펼쳐서 참조)'
          schema:
            type: object
            properties:
              message:
                type: string
                example: '입력 값이 구데긴대요?'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

  /users/me/movies/history:
    get:
      tags:
        - Movies
        - Users
      summary: 사용자가 최근 본 영화 목록 가져오기
      # description: 기본 20개씩 가져와요.
      parameters:
        - $ref: '#/components/parameters/SkipQuery'
        - $ref: '#/components/parameters/TakeQuery'

      responses:
        200:
          description: 성공적으로 영화를 가져온 경우
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MovieOutput'

        400:
          description: 'take, skip 범위 벗어난 경우..(query의 model 펼쳐서 참조)'
          schema:
            type: object
            properties:
              message:
                type: string
                example: '입력 값이 구데긴대요?'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

  /users/me/movies/favorites:
    get:
      tags:
        - Users
        - Movies
      summary: 사용자가 즐겨찾기 한 영화 목록 가져오기
      # description: 기본 20개씩 가져와요.
      parameters:
        - $ref: '#/components/parameters/SkipQuery'
        - $ref: '#/components/parameters/TakeQuery'

      responses:
        200:
          description: 성공적으로 영화를 가져온 경우
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MovieOutput'

        400:
          description: 'take, skip 범위 벗어난 경우..(query의 model 펼쳐서 참조)'
          schema:
            type: object
            properties:
              message:
                type: string
                example: '입력 값이 구데긴대요?'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'


  /movies/detail/{movieId}:
    get:
      tags:
        - Movies
      summary: 영화 정보 디테일하게 한 개만 가져옵니다
      parameters:
        - name: movieId
          in: path
          description: 가져올 movie의 id
          required: true
          type: integer

      responses:
        '200(2)':
          description: movieId로 조회한 영화가 DB에 없는 경우..
          schema:
            type: null
            example: null
            nullable: true

        200:
          description: 잘 가져온 경우
          schema:
            $ref: '#/components/schemas/MovieOutput'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

  /movies/{movieId}/reviews:
    post:
      tags:
        - 'Movies'
        - 'Reviews'
      summary: 영화 리뷰를 만들어요
      description: 영화 리뷰는 제목과 내용과 평점으로 구성되어 있아요
      parameters:
        - in: 'body'
          name: 'CreateReviewBody'
          description: '등록할 리뷰 정보'
          required: true
          schema:
            $ref: '#/components/schemas/CreateReviewBody'

        - $ref: '#/components/parameters/AccessTokenCookie'

      responses:
        201:
          description: 리뷰 만들어짐
          schema:
            type: object
            properties:
              reviewId:
                type: integer
                example: 101

        401:
          description: 'AccessToken이 유효하지 않은 경우'
          schema:
            $ref: '#/components/schemas/InvalidTokenError'

        401(2):
          description: 'AccessToken이 만료된 경우'
          schema:
            $ref: '#/components/schemas/ExpiredAccessTokenError'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

  /users/me/movies/reviews:
    get:
      summary: 내가 작성한 영화 리뷰 전부 보기
      tags:
        - Users
        - Reviews
      parameters:
        - $ref: '#/components/parameters/SkipQuery'
        - $ref: '#/components/parameters/TakeQuery'
        - $ref: '#/components/parameters/AccessTokenCookie'

      responses:
        200:
          description: 정상 응답
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ReviewOverviewOutput'

        '200(2)':
          description: 작성한 리뷰가 한개도 없는 경우, 빈 배열
          schema:
            type: array
            example: [ ]

        401:
          description: 'AccessToken이 유효하지 않은 경우'
          schema:
            $ref: '#/components/schemas/InvalidTokenError'

        401(2):
          description: 'AccessToken이 만료된 경우'
          schema:
            $ref: '#/components/schemas/ExpiredAccessTokenError'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

  /movies/reviews/{reviewId}:
    patch:
      summary: 영화 리뷰 수정하기
      tags:
        - 'Movies'
        - 'Reviews'
      parameters:
        - name: reviewId
          in: path
          description: 수정할 리뷰의 id
          required: true
          schema:
            type: integer
            format: int64

        - $ref: '#/components/parameters/AccessTokenCookie'

        - name: UpdateReviewBody
          in: body
          description: 수정할 리뷰 데이터
          required: true
          schema:
            $ref: '#/components/schemas/UpdateReviewBody'

      responses:
        200:
          description: 리뷰 수정 성공(반환 body 없음)

        401:
          description: 'AccessToken이 유효하지 않은 경우'
          schema:
            $ref: '#/components/schemas/InvalidTokenError'

        401(2):
          description: 'AccessToken이 만료된 경우'
          schema:
            $ref: '#/components/schemas/ExpiredAccessTokenError'

        404:
          description: '리뷰가 이미 삭제된 경우'
          schema:
            $ref: '#/components/schemas/NotFoundError'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

    delete:
      summary: 리뷰 삭제하기
      tags:
        - Movies
        - Reviews
      parameters:
        - name: reviewId
          in: path
          description: 수정할 리뷰의 id
          required: true
          schema:
            type: integer
            format: int64

        - $ref: '#/components/parameters/AccessTokenCookie'

      responses:
        200:
          description: 리뷰 삭제 성공(반환 body 없음)

        401:
          description: 'AccessToken이 유효하지 않은 경우'
          schema:
            $ref: '#/components/schemas/InvalidTokenError'

        401(2):
          description: 'AccessToken이 만료된 경우'
          schema:
            $ref: '#/components/schemas/ExpiredAccessTokenError'

        404:
          description: '리뷰가 이미 삭제된 경우'
          schema:
            $ref: '#/components/schemas/NotFoundError'

        500:
          description: '서버 오류가 발생한 경우'
          schema:
            $ref: '#/components/schemas/InternalServerError'

components:
  headers:
    Set-Cookie:
      type: string
      example: accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      description: 로그인 성공 시 사용자 인증을 위한 쿠키 발급

  securitySchemes:
    googleAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            email: 구글 이메일
            profile: 구글 프로필
  parameters:
    AccessTokenCookie:
      in: cookie
      name: AccessToken
      description: 로그인 된 사용자 식별을 위해 AccessToken 필요
      required: true
      schema:
        type: string

    OptionalAccessTokenCookie:
      in: cookie
      name: AccessToken
      description: 로그인 된 사용자 식별을 위해 AccessToken 필요(옵션)
      required: false
      schema:
        type: string

    RefreshTokenCookie:
      in: cookie
      name: RefreshToken
      description: AccessToken 재발급을 위해 RefreshToken 필요
      required: true
      schema:
        type: string



    SkipQuery:
      in: query
      name: skip
      description: $skip개 이후 가져오기(기본값 0, 최소 0)
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0
    TakeQuery:
      in: query
      name: take
      description: $skip개 이후 $take개 가져오기(기본값 20, 최소 10, 최대 100)
      required: false
      schema:
        type: integer
        minimum: 10
        maximum: 100
        default: 20

    Order:
      name: order
      in: query
      type: string
      enum: [ "asc", "desc" ]
      description: "기본값 'desc', 정렬 순서를 결정합니다. asc는 오름차순, desc는 내림차순입니다."
      default: 'desc'

    Criteria:
      name: criteria
      in: query
      type: string
      enum: [ "popularity", "voteAverage", "releaseDate" ]
      description: "기본값 'releaseDate', 정렬 기준을 결정합니다. popularity는 인기순, voteAverage는 평점순, releaseDate는 개봉일 순입니다."
      default: 'releaseDate'

    Genre:
      in: query
      name: genre
      type: string
      enum:
        - '*'
        - Action
        - Adventure
        - Animation
        - Comedy
        - Crime
        - Documentary
        - Drama
        - Family
        - Fantasy
        - History
        - Horror
        - Music
        - Mystery
        - Romance
        - Science Fiction
        - Thriller
        - TV Movie
        - War
        - Western
      default: '*'

    Genres:
      name: genres
      type: array
      items:
        type: string
        enum:
          - '*'
          - Action
          - Adventure
          - Animation
          - Comedy
          - Crime
          - Documentary
          - Drama
          - Family
          - Fantasy
          - History
          - Horror
          - Music
          - Mystery
          - Romance
          - Science Fiction
          - Thriller
          - TV Movie
          - War
          - Western
        style: form
        example: [ War, Western ]


  schemas:
    InvalidRequestBodyError:
      type: object
      properties:
        message:
          type: string
          example: '입력 값이 구데긴대요?'

    InvalidRequestQueryError:
      type: object
      properties:
        message:
          type: string
          example: '입력 query가 구데긴대요?'

    InvalidRequestParamsError:
      type: object
      properties:
        message:
          type: string
          example: '입력 params가 구데긴대요?'

    NotFoundError:
      type: object
      properties:
        message:
          type: string
          example: '자원을 찾을 수 없습니다?'

    InternalServerError:
      type: object
      properties:
        message:
          type: string
          example: '알 수 없는 오류인대요?'

    InvalidTokenError:
      type: object
      properties:
        message:
          type: string
          example: '말 같지도 않은 토큰을 주셨내요?'

    UnauthorizedUserError:
      type: object
      properties:
        message:
          type: string
          example: '로그인 꼮 하새요?'

    DuplicateUserError:
      type: object
      properties:
        message:
          type: string
          example: '이미 존재하는 사용자인대요?'

    DuplicateEmailError:
      type: object
      properties:
        message:
          type: string
          example: '이미 존재하는 이매일인대요?'

    UserNotFoundError:
      type: object
      properties:
        message:
          type: string
          example: '가입을 한 적이 없내요? 가입부터 하새요'

    InvalidPasswordError:
      type: object
      properties:
        message:
          type: string
          example: '비번이 틀리내요??'

    NotSetPasswordError:
      type: object
      properties:
        message:
          type: string
          example: '비밀번호를 설정하지 않으셨습니다. 꾸끌 로그인을 하신것 같은 대 요?^^'

    ExpiredAccessTokenError:
      type: object
      properties:
        message:
          type: string
          example: '토큰 만료 기간 지납'

    ExpiredRefreshTokenError:
      type: object
      properties:
        message:
          type: string
          example: '토큰 리프래시불가능'

    PermissionDeniedError:
      type: object
      properties:
        message:
          type: string
          example: '이 걸 할 권한이 없느내요?'

    InvalidFileTypeError:
      type: object
      properties:
        message:
          type: string
          example: '지원되지 않는 파일 형식입니다? : png'

    SignupBody:
      type: object
      properties:
        email:
          type: string
          example: 'abc@gmail.com'
          maxLength: 255
          required: true
          description: 사용자 이메일 겸 로그인 아이디

        name:
          type: string
          example: 김방구
          minLength: 1
          maxLength: 20
          required: true
          description: 사용자 이름

        password:
          type: string
          example: 'mypassword'
          minLength: 4
          maxLength: 100
          required: true
          description: 사용자 비밀번호

      required:
        - username
        - password
        - name
        - email

    LoginBody:
      type: object
      properties:
        email:
          type: string
          example: 'abc@gmail.com'
          required: true
          description: 사용자 이메일 겸 로그인 아이디
        password:
          type: string
          example: '1123445566788'
          required: true
          description: 사용자 비밀번호
      required:
        - email
        - password

    UserOutput:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the user.
        email:
          type: string
          format: email
          description: The email address of the user.
        name:
          type: string
          description: The name of the user.
        avatarUrl:
          type: string
          nullable: true
          description: The URL of the user's avatar (if provided).
        createdAt:
          type: string
          format: date-time
          description: The date and time that the user account was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time that the user account was last updated.

    SignupOutput:
      type: object
      properties:
        userId:
          type: number
          example: 1234

    UpdateAvatarOutput:
      type: object
      properties:
        avatarUrl:
          type: string
          example: '/images/avatars/b2924b86-ffb4-43cd-a249-4a84ca51e028.png'
          nullable: true

    DeleteUserBody:
      type: object
      properties:
        password:
          type: string
          nullable: true
          minLength: 4
          maxLength: 100
          description: 탈퇴할 사용자 비밀번호
          required: false

      required:
        - password

    UpdateUserPasswordBody:
      type: object
      properties:
        oldPassword:
          type: string
          example: 12313123
          minLength: 4
          maxLength: 100
          required: true

        newPassword:
          example: zxcx123zxc
          type: string
          minLength: 4
          maxLength: 100
          required: true

      required:
        - oldPassword
        - newPassword

    UpdateMeBody:
      type: object
      properties:
        name:
          type: string
          nullable: true
          minLength: 4
          maxLength: 20
          required: false
        password:
          type: string
          nullable: true
          minLength: 4
          maxLength: 100
          required: false

    UpdateReviewBody:
      type: object
      properties:
        title:
          type: string
          maxLength: 100
          required: false
        content:
          type: string
          maxLength: 1000
          required: false
        rating:
          type: number
          minimum: 0.0
          maximum: 5.0
          required: false

    CreateReviewBody:
      type: object
      properties:
        title:
          type: string
          description: 리뷰의 제목
          maxLength: 100
          example: 내 평생 이렇게 잠 잘 오는 영화는 처음입니다.
        content:
          type: string
          description: 리뷰의 내용
          maxLength: 1000
          example: 꿀잠을 자서 내일 출근하는데 매우 큰 도움이 될듯 싶습니다.
        rating:
          type: number
          description: 영화 평점(0~100)
          minimum: 0
          maximum: 100
          example: 59
      required:
        - title
        - content
        - rating

    MovieOutput:
      type: object
      properties:
        id:
          type: integer
          example: 700391
        title:
          type: string
          example: "65"
        overview:
          type: string
          example: "65 million years ago, the only 2 survivors of a spaceship from Somaris that crash-landed on Earth must fend off dinosaurs and reach the escape vessel in time before an imminent asteroid strike threatens to destroy the planet."
        popularity:
          type: number
          example: 3754.397
        voteCount:
          type: integer
          example: 484
        voteAverage:
          type: number
          example: 6.3
        backdropUrl:
          type: string
          nullable: true
          example: "https://image.tmdb.org/t/p/original/eSVu1FvGPy86TDo4hQbpuHx55DJ.jpg"
        posterUrl:
          type: string
          nullable: true
          example: "https://image.tmdb.org/t/p/original/rzRb63TldOKdKydCvWJM8B6EkPM.jpg"
        lang:
          type: string
        releaseDate:
          nullable: true
          type: string
          format: date-time
          example: "2023-03-02T00:00:00.000Z"
        genres:
          $ref: '#/components/parameters/Genres'

    ReviewOverviewOutput:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        title:
          type: string
          example: '리뷰입니다..'
        overview:
          type: string
          example: '맛없어요 영화'
        rating:
          type: float
          format: float64
          example: 0.1
        createdAt:
          type: string
          format: date-time
          example: '2023-04-16T01:41:43.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-04-15T16:41:44.000Z'
        author:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 3
            name:
              type: string
              example: 'abc'
            avatarUrl:
              type: string
              example: '/imgs/avatar/apassa21.png'

#    CommentOutput:
#      type: object
#      properties: