generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

// email: '',
// password: '',
// role: 'AI_ADMIN',

model User {
  id                   Int             @id @default(autoincrement())
  name                 String          @db.VarChar(20)
  email                String          @unique @db.VarChar(255)
  password             String?         @db.VarChar(100)
  avatarUrl            String?         @db.VarChar(255)
  createdAt            DateTime        @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
  updatedAt            DateTime        @default(dbgenerated("CURRENT_TIMESTAMP")) @updatedAt @db.Timestamp()
  deletedAt            DateTime?       @db.Timestamp()
  comments             Comment[]
  reviews              Review[]
  likeMovies           LikeMovie[]
  favoriteMovies       FavoriteMovie[]
  recentlyViewedMovies MovieHistory[]

  @@index([email], name: "email")
}

model Movie {
  id            Int             @id // tmdb의 id를 따름
  title         String          @db.VarChar(100)
  titleKo       String?         @db.VarChar(100)
  overview      String          @db.Text
  overviewKo    String?         @db.Text
  adult         Boolean
  popularity    Float
  voteCount     Int
  voteAverage   Float
  backdropUrl   String?
  posterUrl     String?
  lang          String // 사용 언어
  releaseDate   DateTime?       @db.Date
  reviews       Review[]
  genres        Genre[]
  likeMovie     LikeMovie[]
  favoriteMovie FavoriteMovie[]
  moviesHistory MovieHistory[]
}

// Movie Detail 조회만 하면 자동으로 추가
// 삭제는 수동
model MovieHistory {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie        Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  userId       Int
  movieId      Int
  createdAt    DateTime  @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
  lastViewedAt DateTime  @default(dbgenerated("CURRENT_TIMESTAMP")) @updatedAt @db.Timestamp()
  deletedAt    DateTime? @db.Timestamp()

  @@index([userId, movieId])
}

model FavoriteMovie {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  userId    Int
  movieId   Int
  createdAt DateTime  @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
  updatedAt DateTime  @default(dbgenerated("CURRENT_TIMESTAMP")) @updatedAt @db.Timestamp()
  deletedAt DateTime? @db.Timestamp()

  @@index([userId, movieId])
}

model LikeMovie {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie     Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  userId    Int
  movieId   Int
  createdAt DateTime  @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
  updatedAt DateTime  @default(dbgenerated("CURRENT_TIMESTAMP")) @updatedAt @db.Timestamp()
  deletedAt DateTime? @db.Timestamp()

  @@index([userId, movieId])
  @@index(movieId)
}

model Genre {
  id     Int     @id // tmdb의 id를 따름
  name   String  @unique
  movies Movie[]

  @@index([name], name: "name")
}

// model AiAdmin {
//     id: 'abc', pw:'123',
// }
// AI
// movieId, reviewId, content
// DB에서 ID,PW 만들어버리기
//
// USERNAME: 'abc',
// PASSWORD: '123',
//
// POST /api/ai/review
// mustAiAdmin

model Review {
  id        Int       @id @default(autoincrement())
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  title     String    @db.VarChar(100)
  overview  String    @db.VarChar(100)
  content   String    @db.Text
  rating    Int?      @db.UnsignedTinyInt // 0 ~ 255
  comments  Comment[]
  authorId  Int
  movieId   Int
  movie     Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
  updatedAt DateTime  @default(dbgenerated("CURRENT_TIMESTAMP")) @updatedAt @db.Timestamp()
  deletedAt DateTime? @db.Timestamp()

  @@index([authorId, deletedAt], name: "authorIdDeletedAt")
}

model Rating {
  id      Int @id @default(autoincrement())
  movieId Int
  rating  Int

  @@index(movieId, name: "movieId")
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String    @db.VarChar(500)
  reviewId  Int
  authorId  Int
  review    Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()
  updatedAt DateTime  @default(dbgenerated("CURRENT_TIMESTAMP")) @updatedAt @db.Timestamp()
  deletedAt DateTime? @db.Timestamp()

  @@index([reviewId], name: "reviewId")
  @@index([authorId, deletedAt], name: "authorIdDeletedAt")
}
