generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model AiAdmin {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(20)
  email     String    @unique @db.VarChar(255)
  password  String?   @db.VarChar(100)
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  deletedAt DateTime? @db.Timestamp(0)
}

model User {
  id                   Int             @id @default(autoincrement())
  name                 String          @db.VarChar(20)
  email                String          @unique @db.VarChar(255)
  password             String?         @db.VarChar(100)
  avatarUrl            String?         @db.VarChar(255)
  createdAt            DateTime        @default(now()) @db.Timestamp(0)
  updatedAt            DateTime        @default(now()) @updatedAt @db.Timestamp(0)
  deletedAt            DateTime?       @db.Timestamp(0)
  comments             Comment[]
  favoriteMovies       FavoriteMovie[]
  likeMovies           LikeMovie[]
  recentlyViewedMovies MovieHistory[]
  movieMetaData        MovieMetaData?
  reviews              Review[]

  @@index([email], map: "email")
}

model Movie {
  id            Int             @id
  title         String          @db.VarChar(100)
  titleKo       String?         @db.VarChar(100)
  overview      String          @db.Text
  overviewKo    String?         @db.Text
  adult         Boolean
  popularity    Float
  voteCount     Int
  voteAverage   Float
  backdropUrl   String?
  posterUrl     String?
  lang          String
  releaseDate   DateTime?       @db.Date
  favoriteMovie FavoriteMovie[]
  likeMovie     LikeMovie[]
  moviesHistory MovieHistory[]
  reviews       Review[]
  genres        Genre[]         @relation("GenreToMovie")

  @@index([voteAverage])
  @@index([popularity])
}

model MovieMetaData {
  id               Int            @id @default(autoincrement())
  userId           Int            @unique
  latestHistoryId  Int?
  historiesCount   Int            @default(0)
  latestLikeId     Int?
  likesCount       Int            @default(0)
  latestFavoriteId Int?
  favoritesCount   Int            @default(0)
  createdAt        DateTime       @default(now()) @db.Timestamp(0)
  updatedAt        DateTime       @default(now()) @updatedAt @db.Timestamp(0)
  deletedAt        DateTime?      @db.Timestamp(0)
  latestFavorite   FavoriteMovie? @relation(fields: [latestFavoriteId], references: [id], onDelete: Cascade)
  latestHistory    MovieHistory?  @relation(fields: [latestHistoryId], references: [id], onDelete: Cascade)
  latestLike       LikeMovie?     @relation(fields: [latestLikeId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([latestFavoriteId])
  @@index([latestHistoryId])
  @@index([latestLikeId])
}

model MovieHistory {
  id            Int             @id @default(autoincrement())
  userId        Int
  movieId       Int
  createdAt     DateTime        @default(now()) @db.Timestamp(0)
  lastViewedAt  DateTime        @default(now()) @updatedAt @db.Timestamp(0)
  deletedAt     DateTime?       @db.Timestamp(0)
  movie         Movie           @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieMetaData MovieMetaData[]

  @@index([userId, movieId])
  @@index([userId, lastViewedAt])
}

model FavoriteMovie {
  id            Int             @id @default(autoincrement())
  userId        Int
  movieId       Int
  createdAt     DateTime        @default(now()) @db.Timestamp(0)
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamp(0)
  deletedAt     DateTime?       @db.Timestamp(0)
  movie         Movie           @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieMetaData MovieMetaData[]

  @@index([userId, movieId])
  @@index([movieId, updatedAt])
}

model LikeMovie {
  id            Int             @id @default(autoincrement())
  userId        Int
  movieId       Int
  createdAt     DateTime        @default(now()) @db.Timestamp(0)
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamp(0)
  deletedAt     DateTime?       @db.Timestamp(0)
  movie         Movie           @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieMetaData MovieMetaData[]

  @@index([userId, movieId])
  @@index([movieId, updatedAt])
}

model Genre {
  id     Int     @id
  name   String  @unique
  movies Movie[] @relation("GenreToMovie")

  @@index([name])
}

model Review {
  id        Int       @id @default(autoincrement())
  movieId   Int
  authorId  Int
  content   String    @db.Text
  rating    Int?      @db.UnsignedTinyInt
  overview  String    @db.VarChar(100)
  title     String    @db.VarChar(100)
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  deletedAt DateTime? @db.Timestamp(0)
  comments  Comment[]
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  movie     Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@index([movieId])
  @@index([authorId])
}

model Rating {
  id      Int @id @default(autoincrement())
  movieId Int
  rating  Int

  @@index([movieId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String    @db.VarChar(500)
  reviewId  Int
  authorId  Int
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  deletedAt DateTime? @db.Timestamp(0)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  review    Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([authorId])
}

model ReviewResponse {
  id       Int     @id @default(autoincrement())
  movieId  Int
  reviewId Int     @unique
  result   Boolean

  @@index([movieId, reviewId])
}
